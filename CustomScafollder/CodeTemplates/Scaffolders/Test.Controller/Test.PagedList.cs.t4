<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
@using PagedList.Mvc;
<# var viewDataType = (EnvDTE.CodeType) Model.ModelType; #>
<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>

<# } #>



@* This partial view defines form fields that will appear when creating and editing entities *@


@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <div class="panel panel-default">
        <div class="panel-body">
<#
foreach (var property in viewDataType.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
	if (property.Name.EndsWith("Filter") || property.Name.Equals("PageSize")) {
#>
			 <div class="row">
				 <label class="control-label col-sm-2">
					@Html.LabelFor(model => model.<#= property.Name #>)
				</label>
				<div class="col-md-6 col-lg-6">
					@Html.TextBoxFor(model => model.<#= property.Name #>, new { @class = "form-control" })
					@Html.ValidationMessageFor(model => model.<#= property.Name #>)
				</div>
			</div>
<#	}
	if (property.Name.Equals("SortOrder") || property.Name.Equals("Page")   ) {
#>		<div>@Html.HiddenFor(model => model.<#= property.Name #>)</div>
<#		}
#>

<#	}
#>
		 </div>
		 <div class="panel-footer">

            <input type="submit" value="Filter" class="btn btn-primary" />
        </div>
    </div>

    
}

<#var collectionModelType=(EnvDTE.CodeType)Model.CollectionType;#>
<#= collectionModelType.Name #>
<div>
    Page @(Model.Records.PageCount < Model.Records.PageNumber ? 0 : Model.Records.PageNumber) of @Model.Records.PageCount    
</div>
<div>
    Total Records: @Model.Records.TotalItemCount
    @Html.PagedListPager(Model.Records, page => Url.Action("PageList",
    new { page}))
    

</div>
<table class="table">
<tr class="sorting">
	<#	List<ModelProperty> properties = GetModelProperties(Model.CollectionType, true);
		foreach (ModelProperty prop in properties){#>
	<th> 
<#if(prop.Type.AsFullName=="System.String" || prop.Type.AsFullName=="System.Int16" || prop.Type.AsFullName=="System.Int32" || prop.Type.AsFullName=="System.Int64") 
{
#>
		@Html.ActionLink("<#= prop.Name #>", "PageList",new {sortorder=@Model.<#= prop.Name #>Sort}) 
<#
}
else
{
#>
		<#= prop.Name #>
<#
}
#>
	
	</th>
	<#}#>
</tr>

	@foreach (var item in Model.Records) 
	{
	 <tr>
<#foreach (ModelProperty prop in properties){#>
		<td>@<#= prop.ValueExpression.Replace("Model.", "item.") #></td>
<#}#>
	</tr>
	}


</table>





@section scripts
{
    <script>
        $(function () {
		//paging
            $(".pagination a").click(function (e) {
                // get the url of the page link
                var url = this.href;

                // update a hidden field inside the search form with this value
                var qs = getUrlVars(url);
                $('#Page').val(qs.page);

                // trigger the search
                $("form input[type=submit]").click();
                return false;
            });

			//sorting
			 $(".sorting a").click(function (e) {
                // get the url of the page link
                var url = this.href;

                // update a hidden field inside the search form with this value
                var qs = getUrlVars(url);
                $('#SortOrder').val(qs.sortorder);

                // trigger the search
                $("form input[type=submit]").click();
                return false;
            });
			//on submit clear filter
			 $("input[type=submit]").click(function (e) {
              return true;
            });
        });

	function getUrlVars(url) {
		var vars = [], hash;
		var hashes = url.slice(url.indexOf('?') + 1).split('&');
		for (var i = 0; i < hashes.length; i++) {
		hash = hashes[i].split('=');
		vars.push(hash[0]);
		vars[hash[0]] = hash[1];
		}
		return vars;
	}
    </script>
}



<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>